#------------------------------------------------------------------------------
# Copyright (c) 2013, Nucleic Development Team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file COPYING.txt, distributed with this software.
#------------------------------------------------------------------------------
from atom.api import Atom, Bool, Str, Typed, ForwardTyped, List


class ConstructNode(Atom):
    """ A node class which holds an enamldef type structure.

    A construct node is an abstract representation of the tree described
    by an 'enamldef' block. Unlike the AST generated by the parser, this
    tree will contain resolved class objects and the other information
    needed to create an instance of the 'enamldef'.

    """
    #: The declarative class object to instantiate.
    klass = Typed(type)

    #: The local identifier to associate with the instances. An empty
    #: string indicates the instances have no identifier.
    identifier = Str()

    #: The construct node children of this node.
    children = List(ForwardTyped(lambda: ConstructNode))

    #: The construct nodes of the super classes. This will only contain
    #: values for enamldef blocks which inherit from another enamldef.
    #: The nodes will be in the reverse order of the type mro.
    super_nodes = List(ForwardTyped(lambda: ConstructNode))

    #: The key for the local scope in the local storage map.
    scope_key = Typed(object)

    #: A boolean indicating whether the node has local scope.
    has_locals = Bool(False)


class TemplateNode(Atom):
    """ A node class which holds a template type structure.

    A template node is an abstrac representation of the tree described
    by the instantiation of a template. Unlike the AST generated by the
    parser, this tree contain the evaluated template body with resolved
    class objects and other information needed to create a tree.

    """
    # The construct node children of the node.
    children = List(ConstructNode)

    #: The key for the local scope in the local storage map.
    scope_key = Typed(object)

    #: A boolean indicating whether the nodes have local scope.
    has_locals = Bool(False)
