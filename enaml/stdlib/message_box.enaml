#------------------------------------------------------------------------------
# Copyright (c) 2013, Nucleic Development Team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file COPYING.txt, distributed with this software.
#------------------------------------------------------------------------------
from enaml.core.dynamic_template import DynamicTemplate
from enaml.image import Image
from enaml.stdlib.dialog_buttons import DialogButton
from enaml.stdlib._message_box_private import _MessageBoxBody, _exec_box
from enaml.stdlib.task_dialog import TaskDialogBody, TaskDialogStyleSheet
from enaml.widgets.dialog import Dialog


enamldef MessageBox(Dialog):
    """

    """
    attr image: Image
    attr text: basestring
    attr content: basestring
    attr details: basestring
    attr buttons: list = []
    TaskDialogStyleSheet:
        pass
    TaskDialogBody:
        attr _show_details = False
        DynamicTemplate:
            base = _MessageBoxBody
            args = (bool(image), bool(content), bool(details))


def about(parent, title, text):
    """ Display a simple about box with title and text.

    Parameters
    ----------
    parent : Widget or None
        The Enaml widget which should be the parent of the dialog.

    title : basestring
        The text for the window title bar.

    text : basestring
        The main text to display in the dialog.

    """
    buttons = [DialogButton('OK', 'accept')]
    _exec_box(MessageBox, parent, title, text, buttons, '')


def critical(parent, title, text, buttons=None):
    """ Display an critical message box with title and text.

    On Windows, the dialog will display the stock critical icon.

    Parameters
    ----------
    parent : Widget or None
        The Enaml widget which should be the parent of the dialog.

    title : basestring
        The text for the window title bar.

    buttons : list, optional
        The list of DialogButton instances to display in the dialog.
        If this is not provided, an 'OK' button will be created.

    Returns
    -------
    result : DialogButton or None
        The dialog button object which was clicked, or None if the
        dialog was closed without clicking a dialog button.

    """
    buttons = buttons or [DialogButton('OK', 'accept')]
    return _exec_box(MessageBox, parent, title, text, buttons, 'critical')


def information(parent, title, text, buttons=None):
    """ Display an information message box with title and text.

    On Windows, the dialog will display the stock information icon.

    Parameters
    ----------
    parent : Widget or None
        The Enaml widget which should be the parent of the dialog.

    title : basestring
        The text for the window title bar.

    buttons : list, optional
        The list of DialogButton instances to display in the dialog.
        If this is not provided, an 'OK' button will be created.

    Returns
    -------
    result : DialogButton or None
        The dialog button object which was clicked, or None if the
        dialog was closed without clicking a dialog button.

    """
    buttons = buttons or [DialogButton('OK', 'accept')]
    return _exec_box(MessageBox, parent, title, text, buttons, 'information')


def question(parent, title, text, buttons=None):
    """ Display a question message box with title and text.

    On Windows, the dialog will display the stock question icon.

    Parameters
    ----------
    parent : Widget or None
        The Enaml widget which should be the parent of the dialog.

    title : basestring
        The text for the window title bar.

    buttons : list, optional
        The list of DialogButton instances to display in the dialog.
        If this is not provided, 'Yes'|'No' buttons will be created.

    Returns
    -------
    result : DialogButton or None
        The dialog button object which was clicked, or None if the
        dialog was closed without clicking a dialog button.

    """
    buttons = buttons or [DialogButton('Yes', 'accept'),
                          DialogButton('No', 'reject')]
    return _exec_box(MessageBox, parent, title, text, buttons, 'question')


def warning(parent, title, text, buttons=None):
    """ Display a warning message box with title and text.

    On Windows, the dialog will display the stock warning icon.

    Parameters
    ----------
    parent : Widget or None
        The Enaml widget which should be the parent of the dialog.

    title : basestring
        The text for the window title bar.

    buttons : list, optional
        The list of DialogButton instances to display in the dialog.
        If this is not provided, an 'OK' button will be created.

    Returns
    -------
    result : DialogButton or None
        The dialog button object which was clicked, or None if the
        dialog was closed without clicking a dialog button.

    """
    buttons = buttons or [DialogButton('OK', 'accept')]
    return _exec_box(MessageBox, parent, title, text, buttons, 'warning')
