#------------------------------------------------------------------------------
# Copyright (c) 2013, Nucleic Development Team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file COPYING.txt, distributed with this software.
#------------------------------------------------------------------------------
from enaml.core.api import Include
from enaml.layout.api import vbox, hbox, align
from enaml.widgets.api import (
    Container, Label, Field, TextEditor, Timer, MdiArea, MdiWindow,
    MultilineField, SpinBox
)

from .live_editor_model import LiveEditorModel


enamldef LiveEditorPanel(Container):
    attr model: LiveEditorModel
    constraints = [
        vbox(hbox(label, field, slabel, spin), editor),
        align('v_center', label, field, slabel, spin),
    ]
    Label: label:
        text = 'View Item'
    Field: field:
        text << model.view_item
        text :: model.view_item = str(text)
    Label: slabel:
        text = 'Font Size'
    SpinBox: spin:
        minimum = 10
        maximum = 20
        value = 11
    TextEditor: editor:
        initial_text = model.input_text
        font << '%dpt Consolas' % spin.value
        syntax = 'python'
        text_changed :: timer.start()
        Timer: timer:
            interval = 350
            single_shot = True
            timeout :: model.input_text = str(editor.get_text())


enamldef LiveTracebackPanel(Container):
    attr model: LiveEditorModel
    padding = 0
    MultilineField:
        text << model.traceback
        read_only = True


def prepare_item(item):
    if item is None:
        return []
    if isinstance(item, Container):
        item.share_layout = True
    return [item]


enamldef LiveViewPanel(Container):
    attr model: LiveEditorModel
    padding = 0
    MdiArea:
        resist_width = 'ignore'
        resist_height = 'ignore'
        constraints = [width >= 640, height >= 480]
        MdiWindow:
            title << model.view_item
            Container:
                padding = 0
                Include:
                    objects << prepare_item(model.output_item)
