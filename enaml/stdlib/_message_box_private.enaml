#------------------------------------------------------------------------------
# Copyright (c) 2013, Nucleic Development Team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file COPYING.txt, distributed with this software.
#------------------------------------------------------------------------------
import sys

from enaml.image import Image
from enaml.layout.layout_helpers import align, hbox, spacer
from enaml.stdlib.dialog_buttons import DialogButtonBox
from enaml.stdlib.task_dialog import (
    TaskDialogContentArea, TaskDialogCommandArea, TaskDialogDetailsArea,
    TaskDialogIconArea, TaskDialogInstructionArea
)
from enaml.widgets.check_box import CheckBox
from enaml.widgets.html import Html
from enaml.widgets.image_view import ImageView
from enaml.widgets.label import Label


template _BodyImage(HasImage: False): pass
template _BodyImage(HasImage: True):
    TaskDialogIconArea:
        ImageView:
            hug_width = 'strong'
            hug_height = 'strong'
            image = nonlocals(1).image


template _BodyContent(HasContent: False): pass
template _BodyContent(HasContent: True):
    TaskDialogContentArea:
        Label:
            text = content
            style_class = 'task-dialog-content'


template _BodyDetails(HasDetails: False): pass
template _BodyDetails(HasDetails: True):
    TaskDialogDetailsArea:
        visible << _show_details
        hug_height = 'ignore'  # allow the html widget to expand
        Html:
            source = details


template _BodyCommand(HasDetails: False):
    TaskDialogCommandArea:
        constraints = [hbox(spacer, buttons)]
        DialogButtonBox: buttons:
            buttons = nonlocals(1).buttons


template _BodyCommand(HasDetails: True):
    TaskDialogCommandArea:
        constraints = [
            hbox(details_cb, spacer, buttons),
            align('v_center', details_cb, buttons),
        ]
        CheckBox: details_cb:
            text = 'More details'
            checked := _show_details
        DialogButtonBox: buttons:
            buttons = nonlocals(1).buttons


template _MessageBoxBody(HasImage, HasContent, HasDetails):
    TaskDialogInstructionArea:
        Label:
            text = nonlocals(1).text or u''
            style_class = 'task-dialog-instructions'
    _BodyImage(HasImage): pass
    _BodyContent(HasContent): pass
    _BodyDetails(HasDetails): pass
    _BodyCommand(HasDetails): pass


def _null_icon():
    return None


_ICONS = {
    '': _null_icon,
    'critical': _null_icon,
    'information': _null_icon,
    'question': _null_icon,
    'warning': _null_icon,
}


if sys.platform == 'win32':

    from enaml import winutil

    def _win_icon(which):
        image = [None]
        def _maker():
            if image[0] is None:
                data, size = winutil.load_icon(which)
                image[0] = Image(data=data, raw_size=size, format='argb32')
            return image[0]
        return _maker

    _ICONS['critical'] = _win_icon(winutil.OIC_ERROR)
    _ICONS['information'] = _win_icon(winutil.OIC_INFORMATION)
    _ICONS['question'] = _win_icon(winutil.OIC_QUES)
    _ICONS['warning'] = _win_icon(winutil.OIC_WARNING)


def _exec_box(MessageBox, parent, title, text, buttons, icon):
    box = MessageBox()
    box.title = title
    box.text = text
    box.image = _ICONS[icon]()
    box.buttons = buttons
    box.set_parent(parent)
    box.exec_()
    for button in box.buttons:
        if button.was_clicked:
            return button
