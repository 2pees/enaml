import traceback
import types
import enaml
from atom.api import *
from enaml.widgets.api import *
from enaml.layout.api import *
from enaml.application import timed_call
from enaml.core.api import Include
from enaml.core.enaml_compiler import EnamlCompiler
from enaml.core.exceptions import DeclarativeNameError
from enaml.core.parser import parse


class UpdateTask(object):
    def __init__(self, model, editor):
        self._model = model
        self._editor = editor

    def __call__(self):
        self._editor.task = None
        self._model.input_text = self._editor.get_text()


class Updater(object):

    def __init__(self, model, editor, inc):
        self._model = model
        self._editor = editor
        self._inc = inc
        self._count = 0

    def __call__(self):
        timed_call(500, self.tock)
        self._count += 1

    def tock(self):
        self._count -= 1
        if self._count == 0:
            self._model.input_text = self._editor.get_text()
            if self._model.compiled_object:
                objs = [self._model.compiled_object]
            else:
                objs = []
            try:
                self._inc.objects = objs
            except Exception:
                self._model.error_message = traceback.format_exc()


class GuiBuilderModel( Atom ):
    """ The model which supports the live gui builder.

    """
    #: the current text in the code entry panel
    input_text = Value()

    #: the enaml object representing the selected item from the available code.
    compiled_object = Value()

    #: a Unicode string representing the name of the enamldef you want to view.
    view_item = Unicode(default='DemoContainer')

    #: a utility add-on for the parse/compile stage.
    file_name = Unicode(default='temp_file_name.enaml')

    #: a Unicode string of the latest error message if the last _process()
    #: call raised an exception.
    error_message = Unicode(default='')

    mod = Value()

    def _observe_input_text(self, change):
        self._process()

    def _observe_view_item(self, change):
        self._process()

    def _process(self ):
        try:
            text = str(self.input_text).replace('\r\n', '\n')
            ast = parse(text, filename=self.file_name)
            code = EnamlCompiler.compile(ast, self.file_name)
            module = types.ModuleType('__main__')
            module.__file__ = self.file_name
            ns = module.__dict__
            self.mod = module
            with enaml.imports():
                exec code in ns
        except Exception:
            self.error_message = traceback.format_exc()
        else:
            self.error_message = ''
            self.compiled_object = ns.get(self.view_item, lambda: None)()


enamldef Main(Window):
    attr model = GuiBuilderModel()
    Container:
        DockArea: area:
            layout = HSplitLayout('editor', 'display')
            DockItem:
                name = 'editor'
                title = 'Live Editor'
                stretch = 0
                Container:
                    constraints = [
                        vbox(
                            hbox(label, field),
                            editor,
                            errors,
                        ),
                        errors.height == 0.3 * editor.height,
                    ]
                    Label: label:
                        text = 'Component'
                    Field: field:
                        text := model.view_item
                        text :: editor.updater()
                    TextEditor: editor:
                        font = '13pt Consolas'
                        syntax = 'python'
                        attr updater = Updater(model, self, inc)
                        text_changed :: updater()
                    MultilineField: errors:
                        text << model.error_message
                        read_only = True
            DockItem:
                name = 'display'
                title = 'Live Display'
                stretch = 1
                Container:
                    Include: inc:
                        pass
