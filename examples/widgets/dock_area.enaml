#------------------------------------------------------------------------------
#  Copyright (c) 2013, Nucleic Development Team
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file COPYING.txt, distributed with this software.
#------------------------------------------------------------------------------
""" This example demonstrates the use of the advanced DockArea widget.

The DockArea widget provides a canvas into which DockItems can be docked
and undocked at will. The layout configuration of the area can be saved
and restored using a form that can be easily serialized to json.

Tabbed dock items can be torn out of the dock area by holding the shift
key while dragging a tab.

"""
import cPickle
import os

from enaml.layout.api import hbox, vbox, spacer
from enaml.widgets.api import (
    Window, Container, DockArea, DockItem, PushButton, Field, Html, Slider,
    ObjectCombo
)


STYLES = {
    'VS 2010': 'vs-2010',
    'Grey Wind': 'grey-wind',
    'New Moon': 'new-moon',
    'Metro': 'metro',
}


if os.environ.get('ENAML_DEPRECATED_DOCK_LAYOUT'):
    from enaml.layout.api import vdocksplit, hdocksplit, docktabs
    THE_LAYOUT = hdocksplit(
        vdocksplit('Item 1', 'Item 3', 'Item 5'),
        vdocksplit('Item 4', 'Item 2'),
        docktabs('Item 6', 'Item 7', 'Item 8', 'Item 9'),
    )
else:
    from enaml.layout.api import ItemLayout, HSplitLayout, VSplitLayout, TabLayout, DockBarLayout, AreaLayout
    THE_LAYOUT = HSplitLayout(
        VSplitLayout('Item 1', 'Item 3', 'Item 5'),
        VSplitLayout('Item 4', 'Item 2'),
        TabLayout('Item 6', 'Item 7', 'Item 8', 'Item 9'),
    )


enamldef MyDockArea(DockArea):
    layout = THE_LAYOUT
    DockItem:
        name = 'Item 1'
        title = name
        Container:
            Field: pass
            Field: pass
            Field: pass
    DockItem:
        name = 'Item 2'
        title = name
        Container:
            PushButton: text = 'foo'
            PushButton: text = 'bar'
            PushButton: text = 'baz'
    DockItem:
        name = 'Item 3'
        title = name
        Container:
            Html: source = '<h1><center>Hello World!</center></h1>'
    DockItem:
        name = 'Item 4'
        title = name
        Container:
            Html: source = '<h1><center>Hello Enaml!</center></h1>'
    DockItem:
        name = 'Item 5'
        title = name
        Container:
            Slider: pass
            Slider: pass
            Slider: pass
    DockItem:
        name = 'Item 6'
        title = name
        Container:
            Html: source = u'<h1><center>Guten Tag!</center></h1>'
    DockItem:
        name = 'Item 7'
        title = name
        Container:
            Field: pass
            Field: pass
            Field: pass
            Field: pass
    DockItem:
        name = 'Item 8'
        title = name
        Container:
            PushButton: text = 'spam'
            PushButton: text = 'ham'
            PushButton: text = 'green'
            PushButton: text = 'eggs'
    DockItem:
        name = 'Item 9'
        title = name
        Container:
            Html: source = '<h1><center>Bonjour!</center></h1>'


enamldef MyItem(DockItem): owner:
    title = name
    Container:
        Field: text = owner.name
        Field: text = owner.name
        Field: text = owner.name
        Field: text = owner.name


enamldef Main(Window):
    Container:
        attr stored = None
        padding = (0, 0, 0, 10)
        constraints = [
            hbox(vbox(10, save_b, restore_b, add_b, style_c, spacer), area)
        ]
        PushButton: save_b:
            text = 'Save Layout'
            clicked ::
                layout = area.save_layout()
                parent.stored = cPickle.dumps(layout, -1)
        PushButton: restore_b:
            text = 'Restore Layout'
            enabled << stored is not None
            clicked ::
                layout = cPickle.loads(stored)
                area.apply_layout(layout)
        PushButton: add_b:
            text = 'Add Items'
            clicked ::
                names = []
                for _ in xrange(3):
                    name = 'Item %d' % (len(area.children) + 1)
                    MyItem(area, name=name)
                    names.append(name)
                layout = area.save_layout()
                for parent, node in layout.traverse():
                    if isinstance(node, ItemLayout) and node.name == 'Item 1':
                        hsplit = HSplitLayout('Item 1', *names)
                        idx = parent.items.index(node)
                        parent.items[idx] = hsplit
                        break
                area.apply_layout(layout)
        ObjectCombo: style_c:
            items = STYLES.keys()
            selected = 'VS 2010'
        MyDockArea: area:
            style << STYLES[style_c.selected]
